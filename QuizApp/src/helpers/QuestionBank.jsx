export const Questions = [
    {
      prompt: "What is the primary purpose of React?",
      optionA: "Server-side rendering",
      optionB: "Building mobile applications",
      optionC: "Building user interfaces",
      optionD: "Database management",
      answer: "optionC", 
    },
    {
      prompt: "What is JSX in React?",
      optionA: "A JavaScript framework",
      optionB: "A templating engine",
      optionC: "A syntax extension for JavaScript",
      optionD: "A CSS preprocessor",
      answer: "optionC",
    },
    {
      prompt: "Which of the following is used to pass data to a child component in React?",
      optionA: "setState",
      optionB: "Props",
      optionC: "render",
      optionD: "useState",
      answer: "optionB",
    },
    {
      prompt: "What is the default method for rendering components in React?",
      optionA: "render()",
      optionB: "getInitialState()",
      optionC: "componentWillMount()",
      optionD: "componentDidMount()",
      answer: "optionA",
    },
    {
      prompt: "Which hook is used to add state to a functional component?",
      optionA: "useEffect",
      optionB: "useContext",
      optionC: "useReducer",
      optionD: "useState",
      answer: "optionD",
    },
    {
      prompt: "What is the purpose of the `useEffect` hook in React?",
      optionA: "To manage state in functional components",
      optionB: "To fetch data or perform side effects",
      optionC: "To add styling to components",
      optionD: "To create a component hierarchy",
      answer: "optionB",
    },
    {
      prompt: "What is the correct syntax to import a React component from another file?",
      optionA: "import { ComponentName } from './ComponentName';",
      optionB: "require('./ComponentName');",
      optionC: "import ComponentName from './ComponentName';",
      optionD: "include ComponentName from './ComponentName';",
      answer: "optionC",
    },
    {
      prompt: "Which of the following lifecycle methods is called once after the initial rendering?",
      optionA: "componentDidMount",
      optionB: "componentWillUpdate",
      optionC: "shouldComponentUpdate",
      optionD: "componentDidUpdate",
      answer: "optionA",
    },
    {
      prompt: "What is the virtual DOM in React?",
      optionA: "A lightweight copy of the real DOM",
      optionB: "The real DOM updated every time state changes",
      optionC: "A different library to manipulate the DOM",
      optionD: "A specific type of state management",
      answer: "optionA",
    },
    {
      prompt: "How do you create a functional component in React?",
      optionA: "class ComponentName extends React.Component {}",
      optionB: "function ComponentName() { return <div>Component</div>; }",
      optionC: "const ComponentName = React.createComponent();",
      optionD: "function ComponentName = React.Component;",
      answer: "optionB",
    },
    {
      prompt: "What does the `key` prop do in React?",
      optionA: "It provides a unique identifier to differentiate elements.",
      optionB: "It is used to set the initial state of a component.",
      optionC: "It is used to define event handlers.",
      optionD: "It is used to bind data to components.",
      answer: "optionA",
    },
    {
      prompt: "Which command is used to create a new React application using Create React App?",
      optionA: "react create app",
      optionB: "npm create react-app my-app",
      optionC: "npx create-react-app my-app",
      optionD: "react new app",
      answer: "optionC",
    },
    {
      prompt: "What is the purpose of React's `strict mode`?",
      optionA: "To allow deprecated code to run",
      optionB: "To identify potential problems in an application",
      optionC: "To enhance the performance of the app",
      optionD: "To create reusable components",
      answer: "optionB",
    },
    {
      prompt: "What does the React `Fragment` component do?",
      optionA: "It wraps multiple elements without adding an extra node to the DOM.",
      optionB: "It applies CSS styles to child components.",
      optionC: "It provides a context for the application state.",
      optionD: "It binds event handlers to components.",
      answer: "optionA",
    },
    {
      prompt: "Which hook would you use to manage complex state logic in a React functional component?",
      optionA: "useEffect",
      optionB: "useState",
      optionC: "useReducer",
      optionD: "useContext",
      answer: "optionC",
    },
    

]